package com.example.taskease.service;

import com.example.taskease.dto.TaskDto;
import com.example.taskease.model.Task;
import com.example.taskease.model.User;
import com.example.taskease.repository.TaskRepository;
import com.example.taskease.repository.UserRepository;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;


import java.time.LocalDateTime;
import java.time.ZoneId;
import java.util.Date;
import java.util.List;
import java.util.stream.Collectors;

@Service
public class TaskService implements ITaskService{

    @Autowired
    private TaskRepository taskRepository;
    @Autowired
    private UserRepository userRepository;

    @Autowired
    private JavaMailSender mailSender;

    @Override
    @Transactional
    public TaskDto createTask(TaskDto taskDto, String username) {
        User user = userRepository.findByUsername(username)
                .orElseThrow(() -> new UsernameNotFoundException("User not found: " + username));

        Task task = convertDtoToEntity(taskDto);
        task.setUser(user); // Set the user
        Task savedTask = taskRepository.save(task);
        return convertEntityToDto(savedTask);
    }

    @Override
    @Transactional(readOnly = true)
    public TaskDto getTaskById(Long taskId, String username) {
        Task task = taskRepository.findById(taskId)
                .orElseThrow(() -> new RuntimeException("Task not found: " + taskId));

        // Check if the task belongs to the user
        if (!task.getUser().getUsername().equals(username)) {
            throw new RuntimeException("Unauthorized");
        }

        return convertEntityToDto(task);
    }

    @Override
    @Transactional(readOnly = true)
    public List<TaskDto> getAllTasksByUser(String username) {
        User user = userRepository.findByUsername(username)
                .orElseThrow(() -> new UsernameNotFoundException("User not found: " + username));

        return taskRepository.findByUser(user)
                .stream()
                .map(this::convertEntityToDto)
                .collect(Collectors.toList());
    }

    @Override
    @Transactional
    public TaskDto updateTask(Long taskId, TaskDto taskDto, String username) {
        Task task = taskRepository.findById(taskId)
                .orElseThrow(() -> new RuntimeException("Task not found: " + taskId));

        // Check if the task belongs to the user
        if (!task.getUser().getUsername().equals(username)) {
            throw new RuntimeException("Unauthorized");
        }

        // Update the task details
        task.setName(taskDto.getName());
        task.setDescription(taskDto.getDescription());
        task.setTaskTime(taskDto.getTaskTime());
        task.setType(taskDto.getType());

        Task updatedTask = taskRepository.save(task);
        return convertEntityToDto(updatedTask);
    }

    @Override
    @Transactional
    public void deleteTask(Long taskId, String username) {
        Task task = taskRepository.findById(taskId)
                .orElseThrow(() -> new RuntimeException("Task not found: " + taskId));

        if (!task.getUser().getUsername().equals(username)) {
            throw new RuntimeException("Unauthorized");
        }

        taskRepository.delete(task);
    }
    @Override
    public TaskDto convertEntityToDto(Task task) {
        TaskDto dto = new TaskDto();
        dto.setTaskId(task.getTaskId());
        dto.setName(task.getName());
        dto.setDescription(task.getDescription());
        dto.setTaskTime(task.getTaskTime());
        dto.setType(task.getType());
        dto.setUserId(task.getUser().getUserId()); // Set the userId
        return dto;
    }
    @Override
    public Task convertDtoToEntity(TaskDto taskDto) {
        Task task = new Task();
        task.setName(taskDto.getName());
        task.setDescription(taskDto.getDescription());
        task.setTaskTime(taskDto.getTaskTime());
        task.setType(taskDto.getType());
        // Note: We don't set the taskId here, as it's generated by the database.
        //       We also don't set the User here; it's set in the createTask method.
        return task;
    }

    @Scheduled(cron = "0 * * * * *") // Run every minute.  Adjust as needed (e.g., "0 0 * * * *" for every hour).
    @Transactional(readOnly = true) // Important for database interaction within a scheduled task.
    public void sendTaskReminders() {
        LocalDateTime now = LocalDateTime.now();
        LocalDateTime start = now.minusMinutes(1);  // Check tasks due in the *next* minute (with a small overlap).
        LocalDateTime end = now.plusMinutes(1);


        List<Task> dueTasks = taskRepository.findByTaskTimeBetween(start, end);

        for (Task task : dueTasks) {
            sendReminderEmail(task);
        }
    }
    private void sendReminderEmail(Task task) {
        SimpleMailMessage message = new SimpleMailMessage();
        message.setTo(task.getUser().getEmail());
        message.setSubject("Task Reminder: " + task.getName());
        message.setText("It's time to complete your task: " + task.getName() +
                "\nDescription: " + task.getDescription() +
                "\nDue Time: " + task.getTaskTime());

        mailSender.send(message);
        System.out.println("email sent to  "+ task.getUser().getEmail());
    }
}
